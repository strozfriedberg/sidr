name: Custom.Windows.Applications.SIDR

author: |
    Kostya Ilioukevitch and Phalgun Kulkarni

    **Search Index Database Reporter** (SIDR) developed by the Solutions Development Team at **LevelBlue**

    Available at **https://github.com/strozfriedberg/sidr**

description: |
    **`SIDR`**: Search Index Database Reporter parses the Windows.edb (In Windows 10) or Windows.db (In Windows 11) database files, which store the data enumerated by Windows Search Indexer service on the Windows endpoint operating systems.

    **`Functionality`**: SIDR generates three CSV/JSON reports consisting of *Files and Folders Existence*, *Internet History*, and *User Activity*. Generated reports can be uploaded to the Velociraptor Server.

    For more information on Windows Search Index see ***https://levelblue.com/blogs/strozfriedberg/windows-search-index-the-forensic-artifact-youve-been-searching-for/***

    **`PSA`**: If the database size is more than ***2GB*** or the free space in the C drive is less than ***5 times*** the size of the database, then the database will not be parsed. Collecting the database from the endpoint and parsing it on a forensic tower is suggested in that case.
    ___

    ***`WARNING`***: In order to parse the database on the target endpoint, SIDR plugin must create an empty database and copy the original database to it. Creating the new copy can result in multiple gigabytes of data in unallocated clusters being overwritten. This may result in a loss of relevant evidence for an in-depth forensic analysis. Please use the plugin with caution, where the likelihood of needing forensic analysis of unallocated clusters is low relative to the benefit of using SIDR via Velociraptor.
    ---

    Â© 2025 LevelBlue


type: CLIENT

tools:
   - name: sidr
     url: https://github.com/strozfriedberg/sidr/releases/latest/download/sidr.exe

parameters:
   - name: Upload_Results
     description: Upload the CSV reports generated by `SIDR`
     default: N
     type: bool

   - name: Collect_WSI_DB
     description: Collect `Windows.edb` (Windows 10 and lower) or `Windows.db` (Windows 11) Search Index database and related files
     default: N
     type: bool

precondition:
 SELECT OS From info() where OS = 'windows'

sources:

  - name: SIDR_Preparation_and_Execution
    query: |

        LET SIDR_Temp <= tempdir(remove_last=TRUE)

        --Enumerating the database depending on the Windows OS version
        LET path <= SELECT OSPath, Size FROM glob(globs="C:/ProgramData/Microsoft/Search/Data/Applications/Windows/Windows.{edb,db}")

        LET database_size <= path.Size[0]

        --Temporary destination for creating an empty database to copy the original database as the original database is locked by the Windows OS and SIDR needs an on-disk database
        LET destination <= SIDR_Temp + "\\" + path_split(path=path.OSPath[0])[-1]

        --Creating an empty database
        LET argvArray <= array(a0="cmd.exe",a1="/c",a2="type",a3="nul",a4=">",a5=destination)

        --Fetching SIDR
        LET SIDR <= SELECT FullPath FROM Artifact.Generic.Utils.FetchBinary(ToolName= "sidr", IsExecutable=TRUE, TemporaryOnly=TRUE)

        --SIDR parameters
        LET argvArray1 <= array(a0=SIDR.FullPath[0],a1="-f", a2="csv", a3="-o",a4=SIDR_Temp, a5=SIDR_Temp)

        SELECT * FROM if
        (
            --Checking the database size to be less than or equal to 2 GB
            condition = database_size <= 2000000000,

            then = {
                SELECT * FROM chain(
                    --Checking if free space in C drive is more than or equal to five times the size of the database
                    a={SELECT Usage.free FROM partitions(all=false) WHERE Usage.free >= 5 * database_size},

                    --Creating an empty database
                    b={SELECT * FROM execve(argv=argvArray)},

                    --Copying the original database to the empty database
                    c={SELECT copy(filename=format(format='''\\.\%s''', args=[path.OSPath]), accessor="ntfs", dest=destination, permissions="rwxrwxrwx", append=TRUE) AS Temp_DB FROM scope()},

                    --Executing SIDR
                    d={SELECT * FROM execve(argv=argvArray1, length=1000000)})},

            --If the space in C drive is less than five times the size of the database then SIDR will not parse the database
            else = {SELECT log(message="Database will not be parsed due to the size and space constraint, please collect the database and parse it on a forensic system") FROM info()}
        )

  - name: SIDR_Results_Files_Report
    query: |
        --Enumerating the "Files and Folders existence report" generated by SIDR
        LET results <= SELECT OSPath FROM glob(globs="*File_Report_*", root=SIDR_Temp)
        SELECT * FROM foreach(row=results, query={SELECT * from parse_csv(filename=results.OSPath)})

  - name: SIDR_Results_Internet_History_Report
    query: |
        --Enumerating the "Internet History report" generated by SIDR
        LET results <= SELECT OSPath FROM glob(globs="*Internet_History_Report_*", root=SIDR_Temp)
        SELECT * FROM foreach(row=results, query={SELECT * from parse_csv(filename=results.OSPath)})

  - name: SIDR_Results_Activity_History_Report
    query: |
        --Enumerating the "Activity History report" generated by SIDR
        LET results <= SELECT OSPath FROM glob(globs="*Activity_History_Report_*", root=SIDR_Temp)
        SELECT * FROM foreach(row=results, query={SELECT * from parse_csv(filename=results.OSPath)})

  - name: SIDR_Results_Upload
    query: |
        --Uploading the reports if the upload option is selected
        SELECT * FROM if(condition=Upload_Results, then={SELECT upload(file=FullPath) FROM glob(globs="/*.csv", root=SIDR_Temp)})

  - name: Collect_WSI
    query: |
        --Collecting the Windows Search Index database if the collect option is selected
        SELECT * FROM if(condition=Collect_WSI_DB, then={SELECT upload(file=FullPath) FROM glob(globs="C:/ProgramData/Microsoft/Search/Data/Applications/Windows/*")})